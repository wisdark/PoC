import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.math.BigInteger;
import java.util.Base64;

public class DCNMCrypto {

    public static String encrypt(String plainTextKey) throws Exception {
        byte[] keyBytes = "jaas is the way".getBytes();
        Cipher blowFishCipher = Cipher.getInstance("Blowfish");
        blowFishCipher.init(1, new SecretKeySpec(keyBytes, "Blowfish"));
        BigInteger integer = new BigInteger(blowFishCipher.doFinal(plainTextKey.getBytes()));
        return integer.toString(16);
    }

    public static String decrypt(String encryptedKey) throws Exception {
        if (encryptedKey.startsWith("#")) {
            encryptedKey = encryptedKey.substring(1);
        }
        BigInteger bInt = new BigInteger(encryptedKey, 16);
        Cipher blowFishCipher = Cipher.getInstance("Blowfish");
        blowFishCipher.init(2, new SecretKeySpec("jaas is the way".getBytes(), "Blowfish"));
        return new String(blowFishCipher.doFinal(bInt.toByteArray()));
    }

    public static String encrypt64(String plainText, String key) throws Exception {
        byte[] keyBytes = key.getBytes();
        Cipher blowFishCipher = Cipher.getInstance("Blowfish");
        blowFishCipher.init(1, new SecretKeySpec(keyBytes, "Blowfish"));
        return Base64.getEncoder().encodeToString(blowFishCipher.doFinal(plainText.getBytes()));
    }


    public static String decrypt64(String encryptedText, String key) throws Exception {
        if (encryptedText.startsWith("#"))
            encryptedText = encryptedText.substring(1);
        Cipher blowFishCipher = Cipher.getInstance("Blowfish");
        blowFishCipher.init(2, new SecretKeySpec(key.getBytes(), "Blowfish"));
        return new String(blowFishCipher.doFinal(Base64.getDecoder().decode(encryptedText)));
    }

    public static void main(String[] args) throws Exception {
        if (args.length < 2) {
          System.out.println("Usage: ./DCNMCrypto <PASSWORD> <KEY>\n");
          return;
        }
        String dcetext = decrypt64(args[0], args[1]);
        System.out.println(dcetext);
    }
}
